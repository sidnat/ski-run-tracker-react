import { createSlice } from '@reduxjs/toolkit';
import { useCookies } from 'react-cookie';
//check if cookie already exists, and user that for initial state


const initialState = {
  "Token": null,
  "First Name": null,
  "Last Name": null,
  "Email": null
};

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToken: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.userToken = action.payload;
    },
    addUser: (state, action) => {
      console.log(action.payload)
      state["First Name"] = action.payload.firstName;
      state["Last Name"] = action.payload.lastName;
      state["Email"] = action.payload.email;
    },
    deleteToken: (state, action) => {
      state.userToken = null;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    isLoggedIn: (state, action) => {
      if (state.Token) {
        return true;
      } else {
        return false;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { addToken, addUser, deleteToken, isLoggedIn } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user;

export default userSlice.reducer;
